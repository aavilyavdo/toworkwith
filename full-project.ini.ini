<?#Необходимо разработать бекенд (серверную часть) веб-приложения, демонстрирующего
расписание рейсовых автобусов.
Автобусы двигаются по маршрутам от конечной до конечной в прямом и обратном направлении. В
разных направлениях может быть разный набор остановочных пунктов.
Фронтенд приложения получает данные с сервера через REST API, необходимо реализовать
следующие методы этого API:

/api/find-bus
Описание:
Возвращает автобусы, маршрут которых включает отрезок от одной остановки к другой, с тремя
ближайшими к текущему времени вариантами времени прибытия на исходную остановку.
Параметры запроса:
● from: id исходной остановки.
● to: id конечной остановки.
Пример ответа:
{
"from": "ул. Пушкина",
"to": "ул. Ленина",
"buses": [
{
"route": "Автобус No11 в сторону ост. Попова", // указывается конечная остановка маршрута
"next_arrivals": ["08:15", "08:40", "09:15"]
},
{
"route": "Автобус No21 в сторону ост.Ленина",
"next_arrivals": ["08:30", "09:04", "09:30"]
}
]
}
Методы (или метод) предоставляющие механизм редактирования маршрутов, т.е. набора
остановок на пути следования автобуса (без указания времени). Входный параметры и
формат ответа продумать самостоятельно.
Требования к реализации:
Язык программирования: PHP (версия 7+).
Использование фреймворка: допускается использование фреймворка на выбор: Laravel,
Symfony, Yii2 или чистый PHP.
База данных: PostgreSQL.
Использование подхода ООП
Оцениваться будут архитектура решения, качество кода, соответствие REST принципам и
тестируемость. Будет плюсом если проект будет запускаться в docker.
Результат представить в виде ссылки на публичный репозиторий на bitbucket.org. Он должен
включать в себя php файлы проекта, sql дамп базы, схему структуры базы данных в виде
изображения и инструкцию по запуску проекта.
Давайте разработаем серверную часть веб-приложения для демонстрации расписания рейсовых автобусов. Для начала определимся со структурой базы данных и основными сущностями, а затем перейдем к разработке API на основе выбранного вами фреймворка.

Структура базы данных
Мы будем использовать следующие сущности:

Остановки (stop)
id: идентификатор остановки
name: название остановки
Автобусы (bus)
id: идентификатор автобуса
number: номер автобуса
Маршруты (route)
id: идентификатор маршрута
bus_id: идентификатор автобуса
direction: направление маршрута (прямое или обратное)
stops: массив идентификаторов остановок
Расписание (schedule)
route_id: идентификатор маршрута
arrival_time: время прибытия на остановку
Миграции
Создадим миграции для каждой из этих таблиц:


// Остановки
Schema::create('stations', function (Blueprint $table) {
    $table->increments('id');
    $table->string('name');
});

// Автобусы
Schema::create('buses', function (Blueprint $table) {
    $table->increments('id');
    $table->integer('number');
});

// Маршруты
Schema::create('routes', function (Blueprint $table) {
    $table->increments('id');
    $table->integer('bus_id')->unsigned();
    $table->boolean('direction');
    $table->json('stations');
    $table->foreign('bus_id')->references('id')->on('buses');
});

// Расписание
Schema::create('schedules', function (Blueprint $table) {
    $table->increments('id');
    $table->integer('route_id')->unsigned();
    $table->time('arrival_time');
    $table->foreign('route_id')->references('id')->on('routes');
});
Модели
Создадим модели для каждой из этих таблиц:


// Остановка
class Stop extends Model
{
    protected $fillable = ['name'];
}

// Автобус
class Bus extends Model
{
    protected $fillable = ['number'];

    public function routes()
    {
        return $this->hasMany(Route::class);
    }
}

// Маршрут
class Route extends Model
{
    protected $casts = [
        'stops' => 'array',
    ];

    protected $fillable = ['bus_id', 'direction', 'stops'];

    public function bus()
    {
        return $this->belongsTo(Bus::class);
    }

    public function schedules()
    {
        return $this->hasMany(Schedule::class);
    }
}

// Расписание
class Schedule extends Model
{
    protected $fillable = ['route_id', 'arrival_time'];

    public function route()
    {
        return $this->belongsTo(Route::class);
    }
}
Контроллеры
Теперь создадим контроллеры для методов API:


// Контроллер для поиска автобусов
class FindBusController extends Controller
{
    public function index(Request $request)
    {
        $from = $request->input('from');
        $to = $request->input('to');

        $routes = Route::whereHas('stops', function ($query) use ($from, $to) {
            $query->where('stops', 'like', '%"' . $from . '"%')
                  ->where('stops', 'like', '%"' . $to . '"%');
        })->get();

        $buses = [];
        foreach ($routes as $route) {
            $bus = $route->bus;
            $nextArrivals = $route->schedules()->orderBy('arrival_time', 'asc')->limit(3)->pluck('arrival_time');
            $buses[] = [
                'route' => $bus->number . ' в сторону ' . end(json_decode($route->stops)),
                'next_arrivals' => $nextArrivals
            ];
        }

        return response()->json([
            'from' => Stop::find($from)->name,
            'to' => Stop::find($to)->name,
            'buses' => $buses
        ]);
    }
}

// Контроллер для редактирования маршрутов
class EditRouteController extends Controller
{
    public function update(Request $request, $id)
    {
        $route = Route::find($id);
        $route->update($request->all());

        return response()->json(['message' => 'Маршрут успешно обновлен'], 200);
    }
}
Маршруты
Добавьте эти маршруты в ваш routes/api.php файл:


Route::post('/find-bus', 'FindBusController@index');
Route::put('/edit-route/{id}', 'EditRouteController@update');
presentationModes=array[id->1,
title=>"docker-based deploy"
Dockerfile и docker-compose.yml
Создайте Dockerfile и docker-compose.yml для запуска вашего приложения в Docker:


# Dockerfile
FROM php:7.4-apache
RUN apt-get update && apt-get install -y libpq-dev
RUN docker-php-ext-install pdo pdo_pgsql
COPY . /var/www/html/
WORKDIR /var/www/html
RUN chown -R www-data:www-data /var/www/html
RUN composer install
EXPOSE 80
CMD apachectl -D FOREGROUND

# docker-compose.yml
version: '3'
services:
  web:
    build: .
    ports:
      - "8080:80"
    volumes:
      - .:/var/www/html
    depends_on:
      - db
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: my_db
    volumes:
      - ./db_data:/var/lib/postgresql/data
volumes:
  db_data:
Инструкция по запуску проекта
Скопируйте репозиторий на свой компьютер:

git clone https://bitbucket.org/your-repository.git
cd bus-scheduler
Запустите контейнеры Docker:

docker-compose up -d
Выполните миграцию базы данных:

docker-compose exec web php artisan migrate
Откройте браузер и перейдите по адресу http://localhost:8080, чтобы увидеть ваше приложение.
Схема структуры базы данных
Вы можете создать схему структуры базы данных с помощью инструмента, такого как PostgreSQL Maestro. Сохраните её в формате PNG и добавьте в репозиторий.

Вот и всё! Ваш проект готов к использованию. Удачи в разработке!
?>
